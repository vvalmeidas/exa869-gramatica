"Name"    = VariablesDeclaration
"Author"  = Adriel  
"Version" = Example
"About"   = This grammar demonstrates Variables Declaration
"Case Sensitive" = True
"Start Symbol"   = <Attribution>

{String Chars} = {Printable} + {HT} - ["]
               
Identifier =  {Letter} ({AlphaNumeric} | '_')*
FloatNumber = {Digit}+('.'{Digit}+)+
IntegerNumber = {Digit}+
RelationalOperator = ('>' | '<' | '<=' | '>=' | '==' | '!=')
CadeCaracters = '"' ({String Chars})* '"'
                           

<Attribution> ::= Identifier <Array Verification> <Attribution2> ';' 
<Attribution2> ::= '=' <Attribution3>                   
<Attribution3>  ::=  <Call> | <Expression> | CadeCaracters
                 



<Call>   ::= Identifier <Complement>        
<Complement> ::= '.'Identifier<Complement> | <Complement1>
<Complement1> ::= '('<Param>')'  
<Param> ::=  Identifier <Array Verification> <MoreParam> | <>            
<MoreParam> ::= ','<Param> | <>
<Array Verification> ::= '['<Array Index>']'<DoubleArray> | <>
<DoubleArray> ::= '['<Array Index>']' | <>
<Array Index> ::= IntegerNumber | Identifier       

                                  



<Expression> ::= <And Exp> <A>

<A> ::= '||' <Expression>
        | <> 
            
<And Exp> ::= <Rel Exp> <B>   

<B> ::= '&&' <And Exp>
        | <> 

<Rel Exp>::= <Add Exp> <C>
            
<C> ::= RelationalOperator <Rel Exp> 
        | <>

<Add Exp> ::= <Mult Exp> <D>

<D> ::= '+' <Add Exp> 
        | '-' <Add Exp>
        | <>

<Mult Exp> ::= <Neg Exp> <E>

<E> ::= '*' <Mult Exp> 
        | '/' <Mult Exp>
        | <>

<Neg Exp>  ::= '-' <F>
               |  <Value> <G>
               | '!' <Value>
               | '++' <Value>
                       
<F> ::= '-' <Value> 
        | <Value>

<G> ::= '--' 
     | '++' 
     | <>

<Value> ::= Identifier
            | IntegerNumber
            | FloatNumber
            | <Vector>
            |  '(' <Expression> ')'

<Vector> ::= Identifier '['<Index>']' <Matrix>            

<Index> ::= Identifier 
         | IntegerNumber
    
<Matrix> ::= '['<Index>']'
            | <>

