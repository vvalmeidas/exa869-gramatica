"Name" = 'Global Scope' 
"Author"   = 'T03 - EXA 869'
"Version"  = '1.0'
"About"   = 'This grammar demonstrate how the global scope will be structured'
"Case Sensitive" = True
"Start Symbol" = <Global>


! ----------------------------------------------------------------- Sets                   
{String Chars} = {Printable} + {HT} - ["]
              
! ----------------------------------------------------------------- Terminals
               
Identifier = {Letter}({AlphaNumeric} | [_])*

Number = {Digit}+('.'{Digit}+)?
       
CadeCaracters = '"' ({String Chars})* '"'
              
Type  = ('int' | 'float' | 'bool' | 'string')
              
! ----------------------------------------------------------------- Rules

!Escorpo Global
<Global> ::= <Constant Declaration> <Class Declaration> <More Classes>
<More Classes> ::= <Class Declaration> | <>


!Declaração de classes
<Class Declaration> ::= 'class' <Class Identification> 
<Class Identification> ::= Identifier <Class Heritage> '{' <Class Body> '}'
<Class Heritage> ::= 'extends' Identifier | <>
<Class Body> ::= <Class Attributes> <Class Methods>
<Class Attributes> ::= <Variable Declaration> | <>
<Class Methods> ::= <Method Declaration> <More Methods> | <>
                 

!Declaração de constantes
<Constant Declaration> ::= const '{' <Constants> '}' | <>                 
<Constants> ::= <Constant> <More Constants>             
<More Constants> ::= <> | <Constants>
<Constant> ::= Type <Atribuition> | <More Attributions>
<More Attributions> ::= ',' <Atribuition> | ';'
<Atribuition> ::= Identifier '=' <value>
<value> ::= Number | 'true' | 'false' | CadeCaracters

!Declaração de variáveis
<Variable Declaration> ::= 'variables' '{' <Variable> '}'          
<Variable> ::= Type <Variable2>
<Variable2> ::= <Name> <More Variables>
<More Variables> ::= <Variable> | <>               
<Name> ::= Identifier <More Names>                           
<More Names> ::= ',' <Name> | ';'


!Declaração de métodos
<Method Declaration> ::= Type Identifier '(' <Parameter Declaration> ')''{' <Commands> 'return' <Return> ';' '}'
                       | 'void' Identifier '(' <Parameter Declaration> ')' '{' <Commands> '}' 
<More Methods> ::= <Method Declaration> | <>
<Parameter Declaration> ::= Type Identifier <Array Verification> <More Parameters> | <>
<More Parameters> ::= ',' <Parameter Declaration> | <>
<Array Verification> ::= '['<Array Index>']'<DoubleArray> | <>
<DoubleArray> ::= '['<Array Index>']' | <>
<Array Index> ::= Number | Identifier 
<Return> ::= Identifier | CodeCaracters | Number 
<Commands>::= !Next episodes
